import{_ as e,p as t,q as i,Y as o}from"./framework-aa5c4115.js";const l={},r=o('<h2 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> vuex</h2><ul><li>vuex 是⼀个专为 Vue.js 应⽤程序开发的状态管理模式。每⼀个 Vuex 应⽤的核⼼就是 store（仓库）。</li><li>“store” 基本上就是⼀个容器，它包含着你的应⽤中⼤部分的状态 ( state )。</li></ul><ol><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发⽣变化，那么相应的组件也会相应地得到⾼效更新。</li><li>改变 store 中的状态的唯⼀途径就是显式地提交 (commit) mutation。这样使得我们可以⽅便地跟踪每⼀个状态的变化。</li></ol><p><strong>Vuex包括⼀下⼏个核⼼模块：</strong></p><ol><li>State：定义了应⽤状态的数据结构，可以在这⾥设置默认的初始状态。</li><li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到计算属性。</li><li>Mutation：是唯⼀更改 store 中状态的⽅法，且必须是同步函数。</li><li>Action：⽤于提交 mutation，⽽不是直接变更状态，可以包含任意异步操作。</li><li>Module：允许将单⼀的 Store 拆分为多个 store 且同时保存在单⼀的状态树中。</li></ol><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><ul><li>Pinia没有Vuex中的mutations选项，因为mutations的出现解决的问题是让devtools进⾏状态追踪,但是随着技术的发展，Pinia已经解决的这个没有mutation依然可以跟踪状态的问题。</li><li>Pinia可以在任意组件中拿到store然后直接修改state中的任意值</li><li>Pinia不再需要Vuex中的modules这样的嵌套结构，取⽽代之的是可以创建⼀个个store</li></ul><p><strong>使⽤上的区别：</strong></p><ol><li>在Vuex中使⽤某个state时，需要$store.state.xxx。在Pinia中直接拿到store之后store.xxx即可</li><li>在Vuex中使⽤某个getter函数时，需要$store.getters.xxx。在Pinia中拿到store后，store.xxx即可</li><li>在Vuex中进⾏异步请求需要派发action函数。在Pinia中拿到store后，直接调⽤action函数即可</li></ol>',9),s=[r];function a(n,u){return t(),i("div",null,s)}const c=e(l,[["render",a],["__file","index_05.html.vue"]]);export{c as default};
