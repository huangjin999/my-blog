import{_ as n,p as s,q as a,Y as t}from"./framework-aa5c4115.js";const e={},p=t(`<hr><h3 id="_1-什么是ajax-fetch-axios三者有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-什么是ajax-fetch-axios三者有什么区别" aria-hidden="true">#</a> 1.什么是ajax, fetch, axios三者有什么区别？</h3><p>ajax是一种前后端交互技术的统称。</p><p>和ajax不一样，fetch也是原生发ajax请求的一种方式。是浏览器原生的API，也是用于网络请求的。 和XMLHttpRequest是一个级别。fetch语法更加简洁，易用，天生支持promise。 <code>js &lt;script&gt; function ajax01(url){ return fetch(url).then(res=&gt;res.json()) } ajax01(&quot;https://www.ml.com/newslist&quot;); &lt;/script&gt; </code></p><p>axios是前端最最常用的网络请求lib，不管是vue中还是react中，首选axios。内部也是封装了XMLHttpRequest和fetch。</p><p>总结： ajax是一种技术统称。 fetch是一个原生api。 axios是一个第三方库。</p><hr><h3 id="原生ajax发送请求的步骤" tabindex="-1"><a class="header-anchor" href="#原生ajax发送请求的步骤" aria-hidden="true">#</a> 原生ajax发送请求的步骤？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">function</span> <span class="token function">ajax01</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>successFn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
      xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">successFn</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">ajax01</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.xxx.com/newlist&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;res:&quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-什么是防抖-什么是节流" tabindex="-1"><a class="header-anchor" href="#_2-什么是防抖-什么是节流" aria-hidden="true">#</a> 2.什么是防抖，什么是节流？</h3><p>防抖： 防止抖动，你先抖动着，啥时候停了，再执行下一步。如：一个搜索输入框，等输入停止之后，再触发搜索。</p><p>节流： 别急，一个一个的来，按时间节奏来触发。如：drap或scroll期间会高频触发回调。</p><p>区别： 1）节流：限制执行频率，有节奏的执行。节流关注的是过程。让整个过程慢下来。 2）防抖：限制执行次数，多次密集触发只执行一次。防抖关注的是结果，是当你不抖动了，我要干什么。</p><p>工作中，使用了ladash中的工具方法。</p><hr><h3 id="_3-px-em-rem-vw-vh有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-px-em-rem-vw-vh有什么区别" aria-hidden="true">#</a> 3.px % em rem vw vh有什么区别？</h3><p>px: 像素，绝对单位。</p><p>%： 相对于父元素的宽度比例</p><p>em: 相对于当前元素的font-size</p><p>rem: 相对于根节点的font-size rem主要是用来适配的。不同的手机屏可以设置不同的html的fs。</p><p>vw: 屏幕宽度的1% 1vw 50vw 100vw</p><p>vh: 屏幕高度的1% 1vh 50vh 100vh 也可以用来做适配，比rem强大。</p><hr><h3 id="_4-箭头函数有什么缺点-什么时候不能使用箭头函数" tabindex="-1"><a class="header-anchor" href="#_4-箭头函数有什么缺点-什么时候不能使用箭头函数" aria-hidden="true">#</a> 4.箭头函数有什么缺点，什么时候不能使用箭头函数？</h3><p>1）没有arguments 2）无法通过apply call bind改变this 3）如果多个箭头函数连接，代码难以阅读</p><p>什么时候不能使用箭头函数？ 1）对象中的方法 2）箭头函数不适合new 3）箭头函数不适合做原型的方法 4）事件绑定中的监听器也适合 5）vue中生命周期和methods选项 6）React中是可以使用的</p><h5 id="总结-当使用箭头函数时-需要对this敏感起来。" tabindex="-1"><a class="header-anchor" href="#总结-当使用箭头函数时-需要对this敏感起来。" aria-hidden="true">#</a> 总结：当使用箭头函数时，需要对this敏感起来。</h5><p>Vue组件本质就是一个js对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>   <span class="token punctuation">{</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;wc&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function-variable function">getName</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token comment">// 不能得到的</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">mounted</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 不能得到的</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React组件本质是一个class:</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>city</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bj&quot;</span><span class="token punctuation">)</span>
  h<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5-for-in-和-for-of有什么区别-js标签有内容" tabindex="-1"><a class="header-anchor" href="#_5-for-in-和-for-of有什么区别-js标签有内容" aria-hidden="true">#</a> 5.for in 和 for of有什么区别？js标签有内容</h3><p>for in 遍历得到的都是key for of 遍历得到的都是value</p><h5 id="遍历对象" tabindex="-1"><a class="header-anchor" href="#遍历对象" aria-hidden="true">#</a> 遍历对象：</h5><p>​ for in可以 for of不行（因为普通对象不是可迭代对象）</p><h5 id="遍历map-set" tabindex="-1"><a class="header-anchor" href="#遍历map-set" aria-hidden="true">#</a> 遍历Map Set:</h5><p>​ for of可以 for in不行</p><h5 id="遍历generator" tabindex="-1"><a class="header-anchor" href="#遍历generator" aria-hidden="true">#</a> 遍历generator:</h5><p>​ for of可以 for in不行</p><p>for of是用来遍历可迭代对象的。如：数组，字符串，Map，Set，得到value for in是用来遍历可枚举的数据的。如：数组，字符串，得到的key</p><hr><h3 id="_6-for-await-of-有什么作用" tabindex="-1"><a class="header-anchor" href="#_6-for-await-of-有什么作用" aria-hidden="true">#</a> 6.for await of 有什么作用？</h3><p>用于遍历多个Promise。</p><hr><h3 id="_7-offsethieght-scrollheight-clientheight或offsetwidth-scrollwidth-clientwidth它们之间的区别" tabindex="-1"><a class="header-anchor" href="#_7-offsethieght-scrollheight-clientheight或offsetwidth-scrollwidth-clientwidth它们之间的区别" aria-hidden="true">#</a> 7.offsetHieght scrollHeight clientHeight或offsetWidth scrollWidth clientWidth它们之间的区别？</h3><h5 id="scrolltop-和-scrollleft" tabindex="-1"><a class="header-anchor" href="#scrolltop-和-scrollleft" aria-hidden="true">#</a> scrollTop 和 scrollLeft?</h5><p>盒子模型： width height padding border margin box-sizing</p><p>offsetHieght/offsetWidth: padding + border + content clientHeight/clientWidth: padding + content scrollHeight/scrollWidth: padding + 实际内容尺寸</p><hr><h3 id="_8-hemlcollection-和-nodelist区别" tabindex="-1"><a class="header-anchor" href="#_8-hemlcollection-和-nodelist区别" aria-hidden="true">#</a> 8.HEMLCollection 和 NodeList区别？</h3><p>DOM是一个棵树，所有的节点都是Node。 Node是Element的基类。 Element是其它的HTML元素的基类，如：HTMLDivElement</p><p>HTMLCollection是所有的Element的集合。 NodeList是所有的Node的集合。</p><p>获取Node和Element的返回结果是不一样的。 如：ele.childNodes 和 ele.children不一样。 ele.childNodes里面包含Text和Commnet节点，ele.children不包含。</p><hr><h3 id="_9-什么是js的严格模式-严格模式下有哪些特点" tabindex="-1"><a class="header-anchor" href="#_9-什么是js的严格模式-严格模式下有哪些特点" aria-hidden="true">#</a> 9.什么是js的严格模式，严格模式下有哪些特点？</h3><p>特点：特点非常多，只需要记住三五个 1）全局变量必须先声明 2）禁止with 3）创建eval作用域 4）禁止this指向window 5）严格模式下，形参不能重名 ....</p><hr><h3 id="_10-什么是options请求-为什么要发options请求" tabindex="-1"><a class="header-anchor" href="#_10-什么是options请求-为什么要发options请求" aria-hidden="true">#</a> 10.什么是options请求，为什么要发options请求？</h3><p>跨域： jd--&gt;tb 浏览器的同源策略，一般是限制ajax，不能请求其它域的server 不会限制 link img script iframe...</p><pre><code>在开发过程中，可以配置代理解决跨域，一个服务器请求另一个服务器是没有跨域问题
</code></pre><p>通过后端可以配置cors来允许跨域，配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://localhost:8080&#39;</span><span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Credentials&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// 是否允许携带cookie</span>
  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PUT,DELETE,GET,POST,OPTTIONS&#39;</span><span class="token punctuation">)</span>
  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Max-Age&#39;</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment">// 1分钟内不再发options请求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>options请求，看上去是多余的请求，是在跨域请求之前进行的一个预检查。是浏览器自行发起的，无需我们干预。不会影响项目功能。</p><hr><h3 id="_11-js的垃圾回收-内存泄露" tabindex="-1"><a class="header-anchor" href="#_11-js的垃圾回收-内存泄露" aria-hidden="true">#</a> 11.JS的垃圾回收（内存泄露）？</h3><p>之前前端基本上不需要关注内存泄露和垃圾回收，因为不像后端项目7*24小时持续运行。 现在前端项目越来越复杂了，多多少少还是需要了解一点内存泄露和垃圾回收。</p><p>什么是垃圾回收？ 不再使用内存空间会在合适的时机被释放。</p><p>常见的垃圾回收算法： 之前：引用计数 现在：标记清除</p><h5 id="以vue为例-垃圾回收-内存泄露-场景" tabindex="-1"><a class="header-anchor" href="#以vue为例-垃圾回收-内存泄露-场景" aria-hidden="true">#</a> 以vue为例，垃圾回收（内存泄露）场景？</h5><ol><li>全局变量或函数，当组件销毁时没有清除，就会造成内存泄露</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token punctuation">{</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
          <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function-variable function">printArr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// vue2 beforeDestroy</span>
      <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span>printArr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>全局事件，定时器，当组件销毁时没有清除，就会造成内存泄露</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token punctuation">{</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
          <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;fn...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// vue2 beforeDestroy</span>
      <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
      <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">intervalId</span><span class="token operator">:</span><span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// vue2 beforeDestroy</span>
  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intervalId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）自定义事件，当组件销毁时没有清除，就会造成内存泄露</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
   <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span><span class="token punctuation">{</span>
       <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token literal-property property">intervalId</span><span class="token operator">:</span><span class="token number">0</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
     <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;showMsg...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">// 自定义事件</span>
     bus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;eat&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>showMsg<span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token comment">// vue2 beforeDestroy</span>
   <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     bus<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&quot;eat&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>showMsg<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-weakmap和weakset" tabindex="-1"><a class="header-anchor" href="#_12-weakmap和weakset" aria-hidden="true">#</a> 12.WeakMap和WeakSet:</h3><hr><h3 id="_13-你项目中通过在beforedestroy中做什么" tabindex="-1"><a class="header-anchor" href="#_13-你项目中通过在beforedestroy中做什么" aria-hidden="true">#</a> 13.你项目中通过在beforeDestroy中做什么？</h3><ol><li>全局变量或函数清空</li><li>全局事件需要解绑，定时器也需要清除</li><li>自定义事件需要解绑 beforeDestroy 在这里做一些收尾工作，目的把不需要的内存空间处理成垃圾。 如果不处理会造成内存泄露。</li></ol><hr><h3 id="_14-浏览器的事件环" tabindex="-1"><a class="header-anchor" href="#_14-浏览器的事件环" aria-hidden="true">#</a> 14.浏览器的事件环</h3><p>js是单线程的，浏览器中的js执行和dom渲染共用一个线程。 js如何解决同一时间做多件事？</p><p>答：异步</p><p>写的代码：</p><ol><li>同步代码</li><li>异步代码：定时器，ajax，promsie.then，async/await，事件绑定....</li><li>宏任务：ajax，setTimeout，setInterval，DOM事件监听....</li><li>微任务：promies中的then回调，MutaionObserver ...</li></ol><h4 id="事件环" tabindex="-1"><a class="header-anchor" href="#事件环" aria-hidden="true">#</a> 事件环：</h4><ol><li>从代码段开始执行，先执行同步代码</li><li>如果遇到一个宏任务，会把这个任务放到一个宏任务队列，如果遇到一个微任务，就把这个微任务放到微任务任务中。</li><li>当同步代码执行完毕后，先去清空微任务队列。清空微任务队列之后，会渲染页面。</li><li>当微任务队列清空完毕后，从宏任务队列中取出一个宏任务，去执行，在执行过程中，你的宏任务中可能还有同步代码或宏任务或微任务，重复上面的步骤，执行完一个宏任务，肯定要清空微任务队列。</li></ol><hr><h3 id="node-js事件环" tabindex="-1"><a class="header-anchor" href="#node-js事件环" aria-hidden="true">#</a> node.js事件环：</h3><p>现在node的事件环和浏览器的事件环差不多。node中，js也是单线程的，也是需要使用异步的。 异步任务分两类：（宏任务和微任务分不同的类型，有不同的优先级）</p><ol><li>宏任务 Timers: setTimeout, setInterval I/O callbacks: 处理网络，流，TCP的错误的回调 idls,prepare: 闲置状态，不用管 poll轮询：执行poll中的IO队列 check: setImmediate close callbacks: 关闭回调，如：soket.on(&quot;close&quot;)</li><li>微任务 promise.then async/await process.nextTick</li></ol><h3 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程：</h3><p>​ 1）先执行同步代码 ​ 2）执行微任务（process.nextTick优先级高） ​ 3）执行宏任务（每个结束时都执行当前的微任务）</p><p>node的事件环境和浏览器的事件环基本上是一样的。 只不过node事件环中的宏任务和微任务分类型，有优先级。</p><p>不同版本的node，事件环有差异的。</p><hr><h3 id="_15-for循环和foreach哪一个快" tabindex="-1"><a class="header-anchor" href="#_15-for循环和foreach哪一个快" aria-hidden="true">#</a> 15.for循环和forEach哪一个快</h3><p>for循环更快一点。因为forEach需要独立的作用域，会有额外的开销。 forEach的语法更加简洁。</p><p>越“低级”的代码，性能往往是越好的。 开发时，不光要考虑性能，还需要考虑代码的可读性。</p><hr><h3 id="_16-移动端h5-点击页面时-有300ms的延迟-如何解决" tabindex="-1"><a class="header-anchor" href="#_16-移动端h5-点击页面时-有300ms的延迟-如何解决" aria-hidden="true">#</a> 16.移动端H5，点击页面时，有300ms的延迟，如何解决？</h3><p>之所以有300ms的延迟，是一个历史遗留问题。 在移端H5页面上，双击可以放大网页。对于网页来说： 有可能是单击，有可能是双击。</p><p>当点击第一下后，怎么判断你是要单击还是双击？ 答：点击第一下，在300ms之内，你又点击了一下，表示双击。 如果300ms之内，你没有点击，表示单击。</p><p>现移动端网页是不需要双击放大的，但是还是存在300ms延迟的。如何解决？ 答：1）fastClick fastClick的原理自行学习。 2）现代的浏览器，如果设置了视口，会自动解决这个问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  
  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="token operator">&gt;</span>
  当设置了width<span class="token operator">=</span>device<span class="token operator">-</span>width，在现代的浏览器中不存在300ms延迟。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_17-cookie" tabindex="-1"><a class="header-anchor" href="#_17-cookie" aria-hidden="true">#</a> 17.cookie:</h3><p>http协议是无状态的，每次请求都会带上cookie，以帮助识别用户身份。 服务端需要给客户端种植cookie，cookie大小有限制4kb。 默认情况下，cookie也是有跨域限制的。不可以跨域共享的。withCredentials cookie是存储在浏览器中（客户端中）</p><p>localStoreage和SessionStorag中也可以存储cookie。</p><p>现代的浏览器开始禁止第三方cookie。为了保护用户隐私。</p><h3 id="_18-session" tabindex="-1"><a class="header-anchor" href="#_18-session" aria-hidden="true">#</a> 18.session：</h3><p>数据都是存储在服务器端。 优点： 1）用户信息都是存储在服务器端，可快速封禁某个用户 2）原理简单，易于上手 缺点： 1）数据都是存储在服务器端，对服务器的内存要求高。 2）多个服务器，session不好同步，解决的话，需要使用第三方缓存，redis。</p><p>cookie+session实现身份认证： cookie是用于登录验证的，存储的是用户标识（userId） session在服务端，存储的是用户详细信息，和cookie信息一一对应。 cookie和session是常见的登录验证解决方案</p><hr><h3 id="_19-jwt-json-web-token" tabindex="-1"><a class="header-anchor" href="#_19-jwt-json-web-token" aria-hidden="true">#</a> 19.jwt: （json web token）</h3><p>1）cookie是http规范，token是自定义传递的 2）cookie会被浏览器自动存在，token需要自己手动的存储 3）cookie有跨域不共享，token默认是没有跨域限制</p><h3 id="_20-jwt鉴权流程" tabindex="-1"><a class="header-anchor" href="#_20-jwt鉴权流程" aria-hidden="true">#</a> 20.jwt鉴权流程：</h3><p>1）前端发起登录请求，后端验证成功之后，返回一个加密的token 2）前端需要自行存储token，token中包含用户信息（一般不包含密码等敏感信息） 3）后面再去请求服务器，会在请求头中带个token，作为用户信息</p><p>cookie+session VS jwt(token): cookie:HTTP标准，有跨域限制，配合session可以实现身份认证。 token:无标准，无跨域限制，用于jwt。</p><p>cookie+session： 数据都是存储在服务器端。 优点： 1）用户信息都是存储在服务器端，可快速封禁某个用户 2）原理简单，易于上手 缺点： 1）数据都是存储在服务器端，对服务器的内存要求高。 2）多个服务器，session不好同步，解决的话，需要使用第三方缓存，redis。 3）默认有跨域限制。</p><h3 id="_21-jwt-token" tabindex="-1"><a class="header-anchor" href="#_21-jwt-token" aria-hidden="true">#</a> 21.jwt(token)：</h3><p>​ 优点： ​ 1）不占服务端内存空间 ​ 2）多服务器，不受影响 ​ 3）不受跨域影响，所以现在开发前后端分离的项目，基本上都jwt实现的鉴权 ​ 缺点：<br> ​ 1）用户信息都是存储在客户端，无法快速封禁某个用户 ​ 2）如果服务端密钥泄露了，用户信息可能被盗取</p><p>开发如何选择： 1）如果有严格管理用户信息的需求（保密，快速封禁），推荐使用cokie+session 2）如果没有特殊需求，就使用jwt。</p><hr><h3 id="_22-如何实现单点登录" tabindex="-1"><a class="header-anchor" href="#_22-如何实现单点登录" aria-hidden="true">#</a> 22.如何实现单点登录？</h3><p>什么是单点登录？ 1）注册登录了百度，就意味登录上了百度图片，百度文库，百度新闻... www.baidu.com image.baidu.com wenku.baidu.com news.baidu.com</p><div class="language-tet line-numbers-mode" data-ext="tet"><pre class="language-tet"><code>  如何实现单点登录呢？
    使用cookie来实现。cookie默认是跨域不共享。但是如果都是xxx.baidu.com，可以设置成共享。
    通过设置cookie中的domain为主域名（baidu.com ），那么xxx.baidu.com都可以共享cookie了。

    使用前提是主域名是一样的。

2）注册登录了淘宝，再去登录支付宝，天猫，闲鱼....
  www.taobao.com 
  www.zhifubao.com 
  www.tianmao.com 
  www.xianyu.com 

  如何实现单点登录呢？
    如果主域名不一样，则cookie不能共享。使用SSO技术方案。

3）OAuth 2.0 
  有很多网站，你可以使用微信登录，QQ登录，支付宝登录。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h5><p>你知道单点登录了，如何实现单点登录？ 答：1）如果主域名一样，可以基于cookie共享来实现 2）如果主域名不一样，则需要使用SSO 3）如果需要接入第三方登录，使用OAuth2.0</p><hr><h3 id="_23-tcp和udp有什么区别" tabindex="-1"><a class="header-anchor" href="#_23-tcp和udp有什么区别" aria-hidden="true">#</a> 23.TCP和UDP有什么区别？</h3><p>网络模型：</p><p>HTTP是位于应用层。 TCP和UDP是位于传输层。</p><h5 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP:</h5><p>​ 要发HTTP请求，需要先建立TCP连接(三次握手)，目的是确保连接建立好。 ​ 进行通信，数据稳定传输。 ​ 还需要断开连接（四次挥手），目的是确保数据传输完毕。 ​ TCP由于有三次握手和四次挥手，这是一种可靠的传输协议。</p><h5 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP：</h5><p>​ 无连接，无断开，不稳定的传输协议，但是效率非常高。 ​ 可用于视频会议，语音通话。</p><p>HTTP是应用层协议，TCP和UDP是传输层协议。 TCP是有连接，有断开，稳定传输。 UDP是无连接，无断开，不稳定传输，但是效率高。</p><hr><h3 id="_24-http1-0-http1-1-http2-0有什么区别" tabindex="-1"><a class="header-anchor" href="#_24-http1-0-http1-1-http2-0有什么区别" aria-hidden="true">#</a> 24.HTTP1.0 / HTTP1.1 / HTTP2.0有什么区别？</h3><p>1.0是最基础的协议，支持基本get和post语法。</p><p>1.1 http缓存策略。 支持TCP长连接：Connection:keep-alive，一次TCP连接多次请求。 断点续传，状态码是206 支持了新的方法，PUT，DEELTE等，可用于Restful API。</p><p>2.0 可压缩header，减少体积 多路复用，一次TCP连接中可以有多个HTTP并行请求 服务端推送。</p><p>还可以使用webscoket来实现</p><hr><h3 id="_25-script标签中的defer和async有什么区别" tabindex="-1"><a class="header-anchor" href="#_25-script标签中的defer和async有什么区别" aria-hidden="true">#</a> 25.script标签中的defer和async有什么区别？</h3><p>无： html暂停解析，下载js，执行js，再继续解析html defer: html继续解析，并行下载js,html解析完再执行js async: html继续解析，并行下载js,执行js，再继续解析html</p><hr><h3 id="_26-prefetch-和-preload有什么区别" tabindex="-1"><a class="header-anchor" href="#_26-prefetch-和-preload有什么区别" aria-hidden="true">#</a> 26.prefetch 和 preload有什么区别？</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token comment">&lt;!-- 还可以这样写 --&gt;</span>
  <span class="token comment">&lt;!-- preload 资源在当前页面使用，会优先加载 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!--prefetch 资源在未来页面使用，会在空闲时加载 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答：preload用到某个资源，会优先加载某个资源 prefetch还没有用到某个资源，会在空闲时加载这个资源</p><h3 id="_27-dns-prefetch和preconnect有什么区别" tabindex="-1"><a class="header-anchor" href="#_27-dns-prefetch和preconnect有什么区别" aria-hidden="true">#</a> 27.dns-prefetch和preconnect有什么区别？</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  dns的目的是得到IP地址。
  dns-prefetch：叫DNS预查询
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.sfdsf.com/1.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  preconnect: 叫DNS预连接
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://fonts.sfdsf.com/1.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_28-websocket和http有什么区别" tabindex="-1"><a class="header-anchor" href="#_28-websocket和http有什么区别" aria-hidden="true">#</a> 28.webSocket和Http有什么区别？</h3><p>webSocket支持端对端通讯，可以由client发起，也可以由server发起。 用于：消息通知，直播间讨论区，聊天室，协同编辑</p><p>协议： ws:// 可实现双端发起请求，没有跨域限制的 wss:// 类似于https，更加安全的websocket协议。 发消息：send 收消息：message事件</p><p>http： 必须先有请求，才会有响应。</p><p>刚才代码中演示的通信方案，比较原始的，在真实项目中，推荐使用socket.io。更加好的。</p><hr><h3 id="_29-http长轮询" tabindex="-1"><a class="header-anchor" href="#_29-http长轮询" aria-hidden="true">#</a> 29.http长轮询：</h3><p>利用http长轮询，也可以模拟出websocket给客户端推送消息。</p><hr><h3 id="_30-重绘和重排" tabindex="-1"><a class="header-anchor" href="#_30-重绘和重排" aria-hidden="true">#</a> 30.重绘和重排：</h3><p>静态网页：任何时候，任何地点访问时，页面都是一样的。 动态网页：随时都会重绘和重排</p><p>重排： 重新计算尺寸和布局，可能会影响其它元素的位置，如元素高度增加，可能使用相邻元素位置下移了 网页动画 Modal Dialog弹窗 增加删除一个元素，显示隐藏一个元素</p><p>重绘： 元素的外观改变，如颜色，背景色。但是元素的尺寸和位置没有变化，不会影响其它元素的位置。</p><p>重排肯定要引发重绘。重绘不一定会引起重排。重排比重绘影响更大，消耗也更大。所以我们需要避免无意义的重排。</p><hr><h3 id="_31-减少重排的方法" tabindex="-1"><a class="header-anchor" href="#_31-减少重排的方法" aria-hidden="true">#</a> 31.减少重排的方法：</h3><p>1）集中修改样式，或使用css中的class。 2）在修改样式之前，可以先设置display:none，脱离文档流。 3）使用BFC特性，不影响其它元素的位置。 4）如果频繁触发，需要做防抖和节流。 5）使用createDocumentFragment批量操作DOM。 6）优化动画，使用CSS3和requestAnimationFrame。</p><hr><h3 id="_32-什么是bfc-触发bfc的条件有哪些" tabindex="-1"><a class="header-anchor" href="#_32-什么是bfc-触发bfc的条件有哪些" aria-hidden="true">#</a> 32.什么是BFC，触发BFC的条件有哪些？</h3><p>Block Format Context 块级格式化上下文 如果产生了BFC，内部的元素无论如何改动，都不会影响外面的其它元素的位置。</p><h5 id="触发bfc的条件有哪些" tabindex="-1"><a class="header-anchor" href="#触发bfc的条件有哪些" aria-hidden="true">#</a> 触发BFC的条件有哪些？</h5><p>1）html根标签 2）float:left/right; 3）overflow:auto/scroll/hidden; 4）display:flex/grid 5）postion:absolute/fixed</p><hr><h3 id="_33-如何实现网页多标签通讯" tabindex="-1"><a class="header-anchor" href="#_33-如何实现网页多标签通讯" aria-hidden="true">#</a> 33.如何实现网页多标签通讯？</h3><p>1）webSocket，肯定需要服务端支持，成本高，无跨域限制 2）localStorage通讯 A和B选项卡： A页面设置localStorage B页面监听localStorage的变化 3）SharedWorker 兼容性不好，自行了解 可单独开一个进程，用于同域页面通讯。</p><hr><h3 id="_34-网页和iframe如何通讯" tabindex="-1"><a class="header-anchor" href="#_34-网页和iframe如何通讯" aria-hidden="true">#</a> 34.网页和iframe如何通讯？</h3><p>使用postMessage发消息，监听message事件，获取消息。</p><hr>`,185),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","baguwen.html.vue"]]);export{r as default};
