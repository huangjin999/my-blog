const l=JSON.parse('{"key":"v-6ad68990","path":"/docs/theme-reco/jsbaguwen.html","title":"JS八股文","lang":"zh-CN","frontmatter":{"title":"JS八股文","date":"2023/03/31"},"headers":[{"level":2,"title":"1. JavaScript垃圾回收是怎么做的？","slug":"_1-javascript垃圾回收是怎么做的","link":"#_1-javascript垃圾回收是怎么做的","children":[]},{"level":2,"title":"2. 谈谈你对 JavaScript 作用域链的理解？","slug":"_2-谈谈你对-javascript-作用域链的理解","link":"#_2-谈谈你对-javascript-作用域链的理解","children":[]},{"level":2,"title":"3. 谈谈你对闭包的理解？","slug":"_3-谈谈你对闭包的理解","link":"#_3-谈谈你对闭包的理解","children":[]},{"level":2,"title":"4. 谈谈你对原型链的理解？","slug":"_4-谈谈你对原型链的理解","link":"#_4-谈谈你对原型链的理解","children":[]},{"level":2,"title":"5. 说一下JS中的继承？","slug":"_5-说一下js中的继承","link":"#_5-说一下js中的继承","children":[{"level":3,"title":"a. 不使用继承","slug":"a-不使用继承","link":"#a-不使用继承","children":[]},{"level":3,"title":"b. 继承之原型继承","slug":"b-继承之原型继承","link":"#b-继承之原型继承","children":[]},{"level":3,"title":"c. 继承之组合继承","slug":"c-继承之组合继承","link":"#c-继承之组合继承","children":[]},{"level":3,"title":"d. 继承之寄生组合继承","slug":"d-继承之寄生组合继承","link":"#d-继承之寄生组合继承","children":[]},{"level":3,"title":"e. 继承之ES中的继承","slug":"e-继承之es中的继承","link":"#e-继承之es中的继承","children":[]}]},{"level":2,"title":"6. 谈谈你对this的理解？","slug":"_6-谈谈你对this的理解","link":"#_6-谈谈你对this的理解","children":[]},{"level":2,"title":"7. 什么是浏览器事件环？","slug":"_7-什么是浏览器事件环","link":"#_7-什么是浏览器事件环","children":[]},{"level":2,"title":"8. 什么是防抖？什么是节流？有什么应用场景？","slug":"_8-什么是防抖-什么是节流-有什么应用场景","link":"#_8-什么是防抖-什么是节流-有什么应用场景","children":[]},{"level":2,"title":"9. 说说什么是事件委托？","slug":"_9-说说什么是事件委托","link":"#_9-说说什么是事件委托","children":[]},{"level":2,"title":"10. 什么是柯里化函数？什么是组合函数？","slug":"_10-什么是柯里化函数-什么是组合函数","link":"#_10-什么是柯里化函数-什么是组合函数","children":[]},{"level":2,"title":"11. 项目开发过程中，都使用到了哪些ES6新特性？","slug":"_11-项目开发过程中-都使用到了哪些es6新特性","link":"#_11-项目开发过程中-都使用到了哪些es6新特性","children":[]},{"level":2,"title":"12. 介绍下 Set、Map的区别？","slug":"_12-介绍下-set、map的区别","link":"#_12-介绍下-set、map的区别","children":[]},{"level":2,"title":"13. 说一下，JS中的模块化？","slug":"_13-说一下-js中的模块化","link":"#_13-说一下-js中的模块化","children":[]},{"level":2,"title":"14. 异步加载JS的方式有哪些？","slug":"_14-异步加载js的方式有哪些","link":"#_14-异步加载js的方式有哪些","children":[]},{"level":2,"title":"15. JS数据类型？","slug":"_15-js数据类型","link":"#_15-js数据类型","children":[]},{"level":2,"title":"16. 如何实现深拷贝？","slug":"_16-如何实现深拷贝","link":"#_16-如何实现深拷贝","children":[]},{"level":2,"title":"17. 在 script 标签上使用 defer 和 async 的区别是什么？","slug":"_17-在-script-标签上使用-defer-和-async-的区别是什么","link":"#_17-在-script-标签上使用-defer-和-async-的区别是什么","children":[]},{"level":2,"title":"18. 封装一个数据类型检测的方法","slug":"_18-封装一个数据类型检测的方法","link":"#_18-封装一个数据类型检测的方法","children":[{"level":3,"title":"a. typeof检测","slug":"a-typeof检测","link":"#a-typeof检测","children":[]},{"level":3,"title":"b. instanceof检测","slug":"b-instanceof检测","link":"#b-instanceof检测","children":[]},{"level":3,"title":"c. constructor检测","slug":"c-constructor检测","link":"#c-constructor检测","children":[]},{"level":3,"title":"d. toString检测","slug":"d-tostring检测","link":"#d-tostring检测","children":[]},{"level":3,"title":"e. 封装方法","slug":"e-封装方法","link":"#e-封装方法","children":[]}]},{"level":2,"title":"19. 手写 事件总线（发布订阅模式）","slug":"_19-手写-事件总线-发布订阅模式","link":"#_19-手写-事件总线-发布订阅模式","children":[]},{"level":2,"title":"20. 用setTimeout实现setInterval","slug":"_20-用settimeout实现setinterval","link":"#_20-用settimeout实现setinterval","children":[]},{"level":2,"title":"21. 用setInterval实现setTimeout","slug":"_21-用setinterval实现settimeout","link":"#_21-用setinterval实现settimeout","children":[]},{"level":2,"title":"22. 实现一个compose函数","slug":"_22-实现一个compose函数","link":"#_22-实现一个compose函数","children":[]},{"level":2,"title":"23. 实现一个科里化函数","slug":"_23-实现一个科里化函数","link":"#_23-实现一个科里化函数","children":[]},{"level":2,"title":"24. 将DOM转化成树结构对象","slug":"_24-将dom转化成树结构对象","link":"#_24-将dom转化成树结构对象","children":[]},{"level":2,"title":"25. 将树结构转换为DOM","slug":"_25-将树结构转换为dom","link":"#_25-将树结构转换为dom","children":[]},{"level":2,"title":"26. 手写call的实现原理","slug":"_26-手写call的实现原理","link":"#_26-手写call的实现原理","children":[]},{"level":2,"title":"27. 手写apply的实现原理","slug":"_27-手写apply的实现原理","link":"#_27-手写apply的实现原理","children":[]},{"level":2,"title":"28. 手写bind的实现原理","slug":"_28-手写bind的实现原理","link":"#_28-手写bind的实现原理","children":[]},{"level":2,"title":"29. 手写new的实现原理","slug":"_29-手写new的实现原理","link":"#_29-手写new的实现原理","children":[]},{"level":2,"title":"30. 手写 instanceof 关键字","slug":"_30-手写-instanceof-关键字","link":"#_30-手写-instanceof-关键字","children":[]},{"level":2,"title":"31. 手写实现深copy","slug":"_31-手写实现深copy","link":"#_31-手写实现深copy","children":[]}],"git":{"createdTime":1705993377000,"updatedTime":1705993377000,"contributors":[{"name":"huangjin999","email":"876710916@qq.com","commits":1}]},"filePathRelative":"docs/theme-reco/js八股文.md"}');export{l as data};
